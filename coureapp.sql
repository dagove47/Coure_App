
 
CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    name VARCHAR2(50) NOT NULL,
    lastname VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) NOT NULL,
    password VARCHAR2(100) NOT NULL,
    id_rol number not null, --Nuevo entry en la tabla users.
    CONSTRAINT users_pk PRIMARY KEY (id),
    CONSTRAINT email_unique UNIQUE (email)
);


-- Crear Tabla de roles. 
CREATE TABLE roles (
id_rol number primary key, 
descripcion varchar (50)
);

-- Rol 1
INSERT INTO roles (id_rol, descripcion)
VALUES (1, 'Admin');

-- Rol 2
INSERT INTO roles (id_rol, descripcion)
VALUES (1, 'User');
 
COMMIT;
SELECT * FROM USERS;



-- Crear la tabla Cliente
CREATE TABLE Cliente (
    id_cliente NUMBER PRIMARY KEY,
    Nombre VARCHAR2(50),
    Apellido VARCHAR2(50),
    Correo_electronico VARCHAR2(100),
    Contraseña VARCHAR2(50),
    Membresia VARCHAR2(20)
);


-- Cliente 1
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (2, 'Juan', 'Perez', 'juan.perez@example.com', 'clave123', 'Premium');

-- Cliente 2
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (3, 'María', 'López', 'maria.lopez@example.com', 'clave456', 'Básica');

-- Cliente 3
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (4, 'Carlos', 'González', 'carlos.gonzalez@example.com', 'clave789', 'Premium');

-- Cliente 4
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (5, 'Laura', 'Rodríguez', 'laura.rodriguez@example.com', 'claveabc', 'Básica');

-- Cliente 5
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (6, 'Daniel', 'Martínez', 'daniel.martinez@example.com', 'clave456', 'Premium');

-- Cliente 6
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (7, 'Ana', 'Sánchez', 'ana.sanchez@example.com', 'clave789', 'Básica');

-- Cliente 7
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (8, 'Pedro', 'Ramírez', 'pedro.ramirez@example.com', 'claveabc', 'Premium');

-- Cliente 8
INSERT INTO Cliente (id_cliente, Nombre, Apellido, Correo_electronico, Contraseña, Membresia)
VALUES (9, 'Isabel', 'Díaz', 'isabel.diaz@example.com', 'clave123', 'Básica');

-- Crear la tabla Factura
CREATE TABLE Factura (
    id_factura NUMBER PRIMARY KEY,
    fecha_factura DATE,
    id_cliente NUMBER,
    total NUMBER,
    CONSTRAINT fk_cliente FOREIGN KEY (id_cliente) REFERENCES Cliente(id_cliente)
);

-- Clientes
-- Insertar nuevo cliente
CREATE OR REPLACE PROCEDURE insertar_nuevo_cliente AS
    v_id_cliente NUMBER := 1; -- Asigna un valor adecuado
    v_nombre VARCHAR2(50) := 'Juan';
    v_apellido VARCHAR2(50) := 'Pérez';
    v_correo VARCHAR2(100) := 'juan@example.com';
    v_contrasena VARCHAR2(50) := 'contraseña123';
    v_membresia VARCHAR2(20) := 'Premium';
BEGIN
    INSERT INTO Cliente VALUES (v_id_cliente, v_nombre, v_apellido, v_correo, v_contrasena, v_membresia);
    COMMIT;
END insertar_nuevo_cliente;
/

-- Actualizar cliente
CREATE OR REPLACE PROCEDURE actualizar_cliente AS
    v_id_cliente NUMBER := 1; -- Asigna el ID del cliente que deseas actualizar
    v_nuevo_nombre VARCHAR2(50) := 'NuevoNombre';
BEGINnte_y_facturas AS
    v_id_cliente NUMBER := 1; -- Asigna el ID del cliente que deseas eliminar
BEGIN
    DELETE FROM Factura WHERE id_c
    UPDATE Cliente SET Nombre = v_nuevo_nombre WHERE id_cliente = v_id_cliente;
    COMMIT;
END actualizar_cliente;
/

-- Eliminar cliente y facturas asociadas
CREATE OR REPLACE PROCEDURE eliminar_clieliente = v_id_cliente;
    DELETE FROM Cliente WHERE id_cliente = v_id_cliente;
    COMMIT;
END eliminar_cliente_y_facturas;
/

-- Consultar clientes
CREATE OR REPLACE PROCEDURE consultar_clientes AS
BEGIN
    FOR cliente IN (SELECT * FROM Cliente) LOOP
        DBMS_OUTPUT.PUT_LINE('ID Cliente: ' || cliente.id_cliente || ', Nombre: ' || cliente.Nombre || ', Apellido: ' || cliente.Apellido || ', Correo: ' || cliente.Correo || ', Membresía: ' || cliente.Membresia);
    END LOOP;
END consultar_clientes;
/

-- Facturas
CREATE OR REPLACE PROCEDURE insertar_nueva_factura (
    v_id_factura NUMBER,
    v_fecha_factura DATE,
    v_id_cliente NUMBER,
    v_total NUMBER
) AS
BEGIN
    INSERT INTO Factura VALUES (v_id_factura, v_fecha_factura, v_id_cliente, v_total);
    COMMIT;
END insertar_nueva_factura;
/

-- Actualizar factura
CREATE OR REPLACE PROCEDURE actualizar_factura(
    p_id_factura IN NUMBER,
    p_nuevo_total IN NUMBER
) AS
BEGIN
    UPDATE Factura SET total = p_nuevo_total WHERE id_factura = p_id_factura;
    COMMIT;
END actualizar_factura;
/

-- Eliminar factura
CREATE OR REPLACE PROCEDURE eliminar_factura AS
    v_id_factura NUMBER := 1; -- Asigna el ID de la factura que deseas eliminar
BEGIN
    DELETE FROM Factura WHERE id_factura = v_id_factura;
    COMMIT;
END eliminar_factura;
/

-- Consultar facturas
CREATE OR REPLACE PROCEDURE consultar_facturas AS
BEGIN
    FOR factura IN (SELECT * FROM Factura) LOOP
        DBMS_OUTPUT.PUT_LINE('ID Factura: ' || factura.id_factura || ', Fecha: ' || factura.fecha_factura || ', ID Cliente: ' || factura.id_cliente || ', Total: ' || factura.total);
    END LOOP;
END consultar_facturas;
/

-- Crea una secuencia para generar automáticamente IDs de reserva
CREATE SEQUENCE reservaciones_seq START WITH 1 INCREMENT BY 1;

-- Crea la tabla de reservaciones
CREATE TABLE reservaciones (
    reserva_id NUMBER PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL,
    fecha DATE NOT NULL  
);

-- Crea un trigger para insertar automáticamente el ID de reserva
CREATE OR REPLACE TRIGGER tr_reservaciones
BEFORE INSERT ON reservaciones
FOR EACH ROW
BEGIN
    SELECT reservaciones_seq.NEXTVAL
    INTO :NEW.reserva_id
    FROM dual;
END;
/



